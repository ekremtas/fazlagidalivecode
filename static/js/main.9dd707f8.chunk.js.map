{"version":3,"sources":["components/TopTracks/index.js","components/TopTracks/TopTracks.js","components/TopArtist/index.js","components/TopArtist/TopArtist.js","components/BaseHighcharts/index.js","components/BaseHighcharts/BaseHighcharts.js","components/useInput/index.js","components/useInput/useInput.js","components/LastfmForm/index.js","components/LastfmForm/LastfmForm.js","redux/actions.js","container/LastfmPage/LastfmPage.js","container/LastfmPage/index.js","App.js","serviceWorker.js","redux/reducers.js","redux/store.js","index.js"],"names":["TopTracks","connect","state","chartsReducer","loading","tracks","title","props","ArtistsPage","Spinner","animation","role","length","data","chart","track","name","xAxisType","yAxisTitle","TopArtist","artists","artist","BaseHighchart","options","type","text","xAxis","yAxis","legend","enabled","plotOptions","series","borderWidth","dataLabels","format","tooltip","headerFormat","pointFormat","colorByPoint","highcharts","Highcharts","useInput","firstvalue","useState","value","setValue","Input","onChange","e","target","LastfmForm","inputs","countryInput","topnumberInput","setSubmitform","submitform","Form","onSubmit","console","log","preventDefault","className","Row","Col","md","FormGroup","Label","Button","axios","require","API","API_KEY","mapDispatchToProps","pageLoading","dispatch","getTracks","country","topnumber","get","then","result","undefined","payload","toUpperCase","catch","error","getArtists","topartists","LastfmPage","setCountry","setTopnumber","useEffect","Container","App","Boolean","window","location","hostname","match","initialState","reducers","combineReducers","action","TracksPage","map","y","Number","listeners","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.9dd707f8.chunk.js","sourcesContent":["import TopTracks from \"./TopTracks\";\n\nexport default TopTracks;","import React from \"react\";\nimport { BaseHighcharts } from \"../../components\";\nimport { connect } from \"react-redux\";\nimport { Spinner } from \"reactstrap\";\n\nconst TopTracks = (props) => {\n  return (\n    <>\n      {props.loading.ArtistsPage ? (\n        <Spinner animation=\"border\" role=\"status\" />\n      ) : props.tracks.length !== 0 ? (\n        <BaseHighcharts\n          data={{\n            data: props.tracks,\n            chart: \"column\",\n            title: props.title.track,\n            name: \"Tracks\",\n            xAxisType: \"category\",\n            yAxisTitle: \"Total percent market share\",\n          }}\n        />\n      ) : (\n        <h1>{props.title.track}</h1>\n      )}\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  const { loading, tracks, title } = state.chartsReducer;\n  return {\n    loading,\n    tracks,\n    title,\n  };\n};\n\nexport default connect(mapStateToProps, null)(TopTracks);\n","import TopArtist from \"./TopArtist\";\n\nexport default TopArtist;","import React from \"react\";\nimport { BaseHighcharts } from \"../../components\";\nimport { connect } from \"react-redux\";\nimport { Spinner } from \"reactstrap\";\nconst TopArtist = (props) => {\n  return (\n    <>\n      {props.loading.ArtistsPage ? (\n        <Spinner animation=\"border\" role=\"status\"/>\n      ) : props.artists.length !== 0 ? (\n        <BaseHighcharts\n          data={{\n            data: props.artists,\n            chart: \"column\",\n            title: props.title.artist,\n            name: \"Artist\",\n            xAxisType: \"category\",\n            yAxisTitle: \"Total percent market share\",\n          }}\n        />\n      ) : (\n        <h1>{props.title.artist}</h1>\n      )}\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  const { loading, artists, title } = state.chartsReducer;\n  return {\n    loading,\n    artists,\n    title,\n  };\n};\n\nexport default connect(mapStateToProps, null)(TopArtist);\n","import BaseHighchart from \"./BaseHighcharts\";\n\nexport default BaseHighchart;","import React from \"react\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\n\nconst BaseHighcharts = (props) => {\n\n  const {data} = props; \n\n  const options = {\n    chart: {\n      type: data.chart,\n    },\n    title: {\n      text: data.title,\n    },\n    xAxis: {\n      type: data.xAxisType,\n    },\n    yAxis: {\n      title: {\n        text: data.yAxisTitle,\n      },\n    },\n    legend: {\n      enabled: false,\n    },\n    plotOptions: {\n      series: {\n        borderWidth: 0,\n        dataLabels: {\n          enabled: true,\n          format: \"{point.y:.1f}\",\n        },\n      },\n    },\n\n    tooltip: {\n      headerFormat: '<span style=\"font-size:11px\">{series.name}</span><br>',\n      pointFormat:\n        '<span style=\"color:{point.color}\">{point.name}</span>: <b>{point.y:.2f}</b> of total<br/>',\n    },\n\n    series: [\n      {\n        name: data.name,\n        colorByPoint: true,\n        data: data.data,\n      },\n    ],\n  };\n  return (\n    <div>\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </div>\n  );\n};\n\nexport default BaseHighcharts;\n","import useInput from \"./useInput\";\n\nexport default useInput;","import React, { useState } from \"react\";\nimport {\n  Input,\n} from \"reactstrap\";\n\nconst useInput = ({ type, firstvalue /*...*/ }) => {\n  const [value, setValue] = useState(firstvalue ? firstvalue : null);\n  const input = (\n    <Input\n      value={value}\n      onChange={(e) => setValue(e.target.value)}\n      type={type}\n    />\n  );\n  return [value, input];\n};\n\nexport default useInput;\n","import LastfmForm from \"./LastfmForm\";\n\n\nexport default LastfmForm;","import React from \"react\";\nimport { Form, FormGroup, Label, Row, Col, Button } from \"reactstrap\";\n\nconst LastfmForm = (props) => {\n  const {\n    countryInput,\n    topnumberInput,\n    setSubmitform,\n    submitform\n  } = props.inputs;\n\n  const onSubmit = function (e) {\n    submitform === 0 ? setSubmitform(1): console.log(\"boş\") ;\n    e.preventDefault();\n  };\n  return (\n    <Form onSubmit={onSubmit} className=\"m-5\">\n      <Row>\n        <Col md=\"6\">\n          <FormGroup>\n            <Label>Country Name</Label>\n            {countryInput}\n          </FormGroup>\n        </Col>\n        <Col md=\"6\">\n          <FormGroup>\n            <Label>Top Number</Label>\n            {topnumberInput}\n          </FormGroup>\n        </Col>\n      </Row>\n      <Button>Submit</Button>\n    </Form>\n  );\n};\n\nexport default LastfmForm;\n","const axios = require(\"axios\");\n\nconst API = \"https://ws.audioscrobbler.com/2.0/\";\nconst API_KEY = \"97cee60fe2193b383cd8377301901a80\";\n\nexport const PAGE_LOADING = \"PAGE_LOADING\";\nexport const ARTISTS_LOADING = \"ARTISTS_LOADING\";\nexport const TRACKS_LOADING = \"TRACKS_LOADING\";\nexport const GET_TRACKS = \"GET_TRACKS\";\nexport const GET_ARTISTS = \"GET_ARTISTS\";\n\nexport const pageLoading = () => {\n  return (dispatch) => {\n    dispatch({\n      type: PAGE_LOADING,\n    });\n  };\n};\n\nexport const getTracks = (country, topnumber) => {\n  return (dispatch) => {\n    dispatch({\n      type: TRACKS_LOADING,\n    });\n    axios\n      .get(\n        `${API}?method=geo.gettoptracks&country=${country}&api_key=${API_KEY}&format=json&limit=${topnumber}`\n      )\n      .then((result) => {\n        if (result.data.tracks !== undefined) {\n          dispatch({\n            type: GET_TRACKS,\n            payload: {\n              data: result.data.tracks.track,\n              title: `Top ${topnumber} Tracks in ${country.toUpperCase()}`,\n            },\n          });\n        }else{\n            dispatch({\n                type: GET_TRACKS,\n                payload: {\n                  data: [],\n                  title: `No track for country of \"${country.toUpperCase()}\"`,\n                },\n              });\n        }\n      })\n      .catch((error) => {\n        // handle error\n        console.log(error);\n      });\n  };\n};\n\nexport const getArtists = (country, topnumber) => {\n    return (dispatch) => {\n      dispatch({\n        type: ARTISTS_LOADING,\n      });\n      axios\n        .get(\n          `${API}?method=geo.gettopartists&country=${country}&api_key=${API_KEY}&format=json&limit=${topnumber}`\n        )\n        .then((result) => {\n          if (result.data.topartists !== undefined) {\n            dispatch({\n              type: GET_ARTISTS,\n              payload: {\n                data: result.data.topartists.artist,\n                title: `Top ${topnumber} Artist in ${country.toUpperCase()}`,\n              },\n            });\n          }else{\n              dispatch({\n                  type: GET_ARTISTS,\n                  payload: {\n                    data: [],\n                    title: `No artist for country of \"${country.toUpperCase()}\"`,\n                  },\n                });\n          }\n        })\n        .catch((error) => {\n          // handle error\n          console.log(error);\n        });\n    };\n  };\n  \n","import React, { useEffect, useState } from \"react\";\nimport {\n  useInput,\n  LastfmForm,\n  TopTracks,\n  TopArtist,\n} from \"../../components\";\nimport { Container } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport { pageLoading, getTracks , getArtists} from \"../../redux/actions\";\n\nconst LastfmPage = (props) => {\n  const [submitform, setSubmitform] = useState(1);\n\n  const [country, setCountry] = useInput({\n    type: \"text\",\n    firstvalue: \"TURKEY\",\n  });\n  const [topnumber, setTopnumber] = useInput({\n    type: \"number\",\n    firstvalue: 10,\n  });\n\n  useEffect(() => {\n    // Make a request for a user with a given ID\n    if (submitform === 1) {\n      props.getTracks(country, topnumber);\n      props.getArtists(country, topnumber);\n      setSubmitform(0);     \n    }\n  }, [country, props, submitform, topnumber]);\n\n  return (\n    <Container>\n      <LastfmForm\n        inputs={{\n          countryInput: setCountry,\n          topnumberInput: setTopnumber,\n          setSubmitform: setSubmitform,\n          submitform: submitform,\n        }}\n      />\n\n      <TopTracks />\n\n      <TopArtist />\n\n    </Container>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  const { loading } = state.chartsReducer;\n  return {\n    loading,\n  };\n};\n\nconst mapDispatchToProps = {\n  pageLoading,\n  getTracks,\n  getArtists\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LastfmPage);\n","import LastfmPage from \"./LastfmPage\";\n\nexport default LastfmPage;","import React from 'react';\nimport './App.css';\nimport { LastfmPage } from './container';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       <LastfmPage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as Actions from \"./actions\";\n\nconst initialState = {\n  loading: { LastfmPage: false },\n  tracks: [],\n  title: {},\n  artists: [],\n};\n\nexport const chartsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case Actions.PAGE_LOADING:\n      return { ...state, loading: { ...state.loading, LastfmPage: true } };\n    case Actions.ARTISTS_LOADING:\n      return { ...state, loading: { ...state.loading, ArtistsPage: true } };\n    case Actions.TRACKS_LOADING:\n      return { ...state, loading: { ...state.loading, TracksPage: true } };\n    case Actions.GET_TRACKS:\n      return {\n        ...state,\n        tracks: action.payload.data.map((track) => {\n          return {\n            name: track.name,\n            y: Number(track.listeners),\n          };\n        }),\n        title: { ...state.title, track: action.payload.title },\n        loading: { ...state.loading, TracksPage: false },\n      };\n    case Actions.GET_ARTISTS:\n      return {\n        ...state,\n        artists: action.payload.data.map((artist) => {\n          return {\n            name: artist.name,\n            y: Number(artist.listeners),\n          };\n        }),\n        title: { ...state.title, artist: action.payload.title },\n        loading: { ...state.loading, ArtistsPage: false },\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers, createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { chartsReducer } from \"./reducers\";\n\nconst reducers = combineReducers({\n  chartsReducer,\n});\n\nconst store = createStore(reducers, applyMiddleware(thunk));\nexport default store;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport store from \"./redux/store\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}