{"version":3,"sources":["components/TopTracks/index.js","components/TopTracks/TopTracks.js","components/TopArtist/index.js","components/TopArtist/TopArtist.js","components/BaseHighcharts/index.js","components/BaseHighcharts/BaseHighcharts.js","redux/actions.js","components/LastfmForm/LastfmForm.js","redux/types.js","components/LastfmForm/index.js","components/TextInputFormik/index.js","components/TextInputFormik/TextInputFormik.js","container/LastfmPage/LastfmPage.js","container/LastfmPage/index.js","App.js","serviceWorker.js","redux/reducers.js","redux/store.js","index.js"],"names":["TopTracks","connect","state","chartsReducer","loading","tracks","title","props","ArtistsPage","Spinner","animation","role","length","data","chart","track","name","xAxisType","yAxisTitle","TopArtist","artists","artist","BaseHighchart","options","type","text","xAxis","yAxis","legend","enabled","plotOptions","series","borderWidth","dataLabels","format","tooltip","headerFormat","pointFormat","colorByPoint","highcharts","Highcharts","axios","require","API","API_KEY","validationSchema","Yup","shape","country","required","min","topnumber","positive","integer","mapDispatchToProps","setArtTraForm","inputs","dispatch","payload","LastfmForm","initialValues","onSubmit","setSubmitting","values","errors","touched","isSubmitting","handleChange","setFieldValue","resetForm","className","Row","Col","md","label","placeholder","onChange","e","Button","color","disabled","TextInputFormik","example","useField","field","meta","FormGroup","Label","Input","invalid","error","valid","value","FormFeedback","FormText","getTracks","get","then","result","undefined","toUpperCase","catch","console","log","getArtists","topartists","LastfmPage","highchartform","useEffect","Container","App","Boolean","window","location","hostname","match","initialState","reducers","combineReducers","action","TracksPage","map","y","Number","listeners","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.14d3f651.chunk.js","sourcesContent":["import TopTracks from \"./TopTracks\";\n\nexport default TopTracks;","import React from \"react\";\nimport { BaseHighcharts } from \"../../components\";\nimport { connect } from \"react-redux\";\nimport { Spinner } from \"reactstrap\";\n\nconst TopTracks = (props) => {\n  return (\n    <>\n      {props.loading.ArtistsPage ? (\n        <Spinner animation=\"border\" role=\"status\" />\n      ) : props.tracks.length !== 0 ? (\n        <BaseHighcharts\n          data={{\n            data: props.tracks,\n            chart: \"column\",\n            title: props.title.track,\n            name: \"Tracks\",\n            xAxisType: \"category\",\n            yAxisTitle: \"Total percent market share\",\n          }}\n        />\n      ) : (\n        <h1>{props.title.track}</h1>\n      )}\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  const { loading, tracks, title } = state.chartsReducer;\n  return {\n    loading,\n    tracks,\n    title,\n  };\n};\n\nexport default connect(mapStateToProps, null)(TopTracks);\n","import TopArtist from \"./TopArtist\";\n\nexport default TopArtist;","import React from \"react\";\nimport { BaseHighcharts } from \"../../components\";\nimport { connect } from \"react-redux\";\nimport { Spinner } from \"reactstrap\";\nconst TopArtist = (props) => {\n  return (\n    <>\n      {props.loading.ArtistsPage ? (\n        <Spinner animation=\"border\" role=\"status\"/>\n      ) : props.artists.length !== 0 ? (\n        <BaseHighcharts\n          data={{\n            data: props.artists,\n            chart: \"column\",\n            title: props.title.artist,\n            name: \"Artist\",\n            xAxisType: \"category\",\n            yAxisTitle: \"Total percent market share\",\n          }}\n        />\n      ) : (\n        <h1>{props.title.artist}</h1>\n      )}\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  const { loading, artists, title } = state.chartsReducer;\n  return {\n    loading,\n    artists,\n    title,\n  };\n};\n\nexport default connect(mapStateToProps, null)(TopArtist);\n","import BaseHighchart from \"./BaseHighcharts\";\n\nexport default BaseHighchart;","import React from \"react\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\n\nconst BaseHighcharts = (props) => {\n\n  const {data} = props; \n\n  const options = {\n    chart: {\n      type: data.chart,\n    },\n    title: {\n      text: data.title,\n    },\n    xAxis: {\n      type: data.xAxisType,\n    },\n    yAxis: {\n      title: {\n        text: data.yAxisTitle,\n      },\n    },\n    legend: {\n      enabled: false,\n    },\n    plotOptions: {\n      series: {\n        borderWidth: 0,\n        dataLabels: {\n          enabled: true,\n          format: \"{point.y:.1f}\",\n        },\n      },\n    },\n\n    tooltip: {\n      headerFormat: '<span style=\"font-size:11px\">{series.name}</span><br>',\n      pointFormat:\n        '<span style=\"color:{point.color}\">{point.name}</span>: <b>{point.y:.2f}</b> of total<br/>',\n    },\n\n    series: [\n      {\n        name: data.name,\n        colorByPoint: true,\n        data: data.data,\n      },\n    ],\n  };\n  return (\n    <div>\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </div>\n  );\n};\n\nexport default BaseHighcharts;\n","import * as Actions from \"./types\";\n\nconst axios = require(\"axios\");\n\nconst API = \"https://ws.audioscrobbler.com/2.0/\";\nconst API_KEY = \"97cee60fe2193b383cd8377301901a80\";\n\n\nexport const pageLoading = () => {\n  return (dispatch) => {\n    dispatch({\n      type: Actions.PAGE_LOADING,\n    });\n  };\n};\n\nexport const getTracks = (country, topnumber) => {\n  return (dispatch) => {\n    dispatch({\n      type: Actions.TRACKS_LOADING,\n    });\n    axios\n      .get(\n        `${API}?method=geo.gettoptracks&country=${country}&api_key=${API_KEY}&format=json&limit=${topnumber}`\n      )\n      .then((result) => {\n        if (result.data.tracks !== undefined) {\n          dispatch({\n            type: Actions.GET_TRACKS,\n            payload: {\n              data: result.data.tracks.track,\n              title: `Top ${topnumber} Tracks in ${country.toUpperCase()}`,\n            },\n          });\n        } else {\n          dispatch({\n            type: Actions.GET_TRACKS,\n            payload: {\n              data: [],\n              title: `No track for country of \"${country.toUpperCase()}\"`,\n            },\n          });\n        }\n      })\n      .catch((error) => {\n        // handle error\n        console.log(error);\n      });\n  };\n};\n\nexport const getArtists = (country, topnumber) => {\n  return (dispatch) => {\n    dispatch({\n      type: Actions.ARTISTS_LOADING,\n    });\n    axios\n      .get(\n        `${API}?method=geo.gettopartists&country=${country}&api_key=${API_KEY}&format=json&limit=${topnumber}`\n      )\n      .then((result) => {\n        if (result.data.topartists !== undefined) {\n          dispatch({\n            type: Actions.GET_ARTISTS,\n            payload: {\n              data: result.data.topartists.artist,\n              title: `Top ${topnumber} Artist in ${country.toUpperCase()}`,\n            },\n          });\n        } else {\n          dispatch({\n            type: Actions.GET_ARTISTS,\n            payload: {\n              data: [],\n              title: `No artist for country of \"${country.toUpperCase()}\"`,\n            },\n          });\n        }\n      })\n      .catch((error) => {\n        // handle error\n        console.log(error);\n      });\n  };\n};\n\nexport const setArtTraForm = (inputs) => {\n  return (dispatch) => {\n    dispatch({\n      type: Actions.SET_ART_TRA_FORM,\n      payload: inputs,\n    });\n  };\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Row, Col, Button } from \"reactstrap\";\nimport { Formik, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport { TextInputFormik } from \"../../components\";\nimport { setArtTraForm } from \"../../redux/actions\";\n\nconst validationSchema = Yup.object().shape({\n  country: Yup.string().required(\"Country is a required field\").min(2),\n  topnumber: Yup.number().positive().integer().required(\"Topnumber is a required field\"),\n});\n\nconst LastfmForm = (props) => {\n  return (\n    <Formik\n      initialValues={{\n        country: \"TURKEY\",\n        topnumber: \"10\",\n      }}\n      validationSchema={validationSchema}\n      onSubmit={(data, { setSubmitting }) => {\n        setSubmitting(true);\n        props.setArtTraForm(data);\n      }}\n    >\n      {({\n        values,\n        errors,\n        touched,\n        isSubmitting,\n        handleChange,\n        setFieldValue,\n        resetForm,\n        setSubmitting\n        /* and other goodies */\n      }) => (\n        <Form className=\"m-5\">\n          <h1 className=\"mb-4 display-2\">Highchart Challenge</h1>\n          <Row>\n            <Col md=\"6\">\n              <TextInputFormik\n                name=\"country\"\n                type=\"text\"\n                label=\"Country Name :\"\n                placeholder=\"Enter Country Name\"\n                onChange={(e) => {\n                  handleChange(e);\n                  setSubmitting(false);\n                }}\n              />\n            </Col>\n            <Col md=\"6\">\n              <TextInputFormik\n                name=\"topnumber\"\n                type=\"text\"\n                label=\"Top Number :\"\n                placeholder=\"Enter Top Number\"\n                onChange={(e) => {\n                  handleChange(e);\n                  setSubmitting(false);\n                }}\n              />\n            </Col>\n          </Row>\n          <Button color=\"success\" disabled={isSubmitting} type=\"submit\">\n            Submit\n          </Button>\n        </Form>\n        \n      )}\n    </Formik>\n  );\n};\n\nconst mapDispatchToProps = {\n  setArtTraForm,\n};\n\nexport default connect(null, mapDispatchToProps)(LastfmForm);\n","export const PAGE_LOADING = \"PAGE_LOADING\";\nexport const ARTISTS_LOADING = \"ARTISTS_LOADING\";\nexport const TRACKS_LOADING = \"TRACKS_LOADING\";\nexport const GET_TRACKS = \"GET_TRACKS\";\nexport const GET_ARTISTS = \"GET_ARTISTS\";\nexport const SET_ART_TRA_FORM = \"SET_ART_TRA_FORM\";\n","import LastfmForm from \"./LastfmForm\";\n\n\nexport default LastfmForm;","import TextInputFormik from \"./TextInputFormik\";\n\nexport default TextInputFormik;","import React from \"react\";\nimport { useField } from \"formik\";\nimport { FormGroup, Label, Input, FormFeedback, FormText } from \"reactstrap\";\n\nconst TextInputFormik = ({ label, example, ...props }) => {\n  const [field, meta] = useField(props);\n  return (\n    <FormGroup>\n      <Label >{label}</Label>\n      <Input\n        {...field}\n        {...props}\n        invalid={meta.error}\n        valid={meta.error ? false : field.value}\n      />\n      <FormFeedback\n        invalid={meta.error}\n        valid={meta.error ? false : field.value}\n      >\n        {meta.error}\n      </FormFeedback>\n      {example ? <FormText>{example}</FormText> : null}\n    </FormGroup>\n  );\n};\n\nexport default TextInputFormik;","import React, { useEffect } from \"react\";\nimport { LastfmForm, TopTracks, TopArtist } from \"../../components\";\nimport { Container } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport { getTracks, getArtists } from \"../../redux/actions\";\n\nconst LastfmPage = (props) => {\n  useEffect(() => {\n    // Make a request for a user with a given ID\n    props.getTracks(props.highchartform.country, props.highchartform.topnumber);\n    props.getArtists(\n      props.highchartform.country,\n      props.highchartform.topnumber\n    );\n  }, [props]);\n\n  return (\n    <Container>\n      <LastfmForm />\n      <hr/>\n\n      <TopTracks />\n      <hr/>\n\n      <TopArtist />\n    </Container>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  const { highchartform } = state.chartsReducer;\n  return {\n    highchartform,\n  };\n};\n\nconst mapDispatchToProps = {\n  getTracks,\n  getArtists,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LastfmPage);\n","import LastfmPage from \"./LastfmPage\";\n\nexport default LastfmPage;","import React from 'react';\nimport './App.css';\nimport { LastfmPage } from './container';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       <LastfmPage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as Actions from \"./types\";\n\nconst initialState = {\n  loading: {},\n  tracks: [],\n  title: {},\n  artists: [],\n  highchartform: { country: \"turkey\", topnumber: 10 },\n};\n\nexport const chartsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case Actions.PAGE_LOADING:\n      return { ...state, loading: { ...state.loading, LastfmPage: true } };\n    case Actions.ARTISTS_LOADING:\n      return { ...state, loading: { ...state.loading, ArtistsPage: true } };\n    case Actions.TRACKS_LOADING:\n      return { ...state, loading: { ...state.loading, TracksPage: true } };\n    case Actions.GET_TRACKS:\n      return {\n        ...state,\n        tracks: action.payload.data.map((track) => {\n          return {\n            name: track.name,\n            y: Number(track.listeners),\n          };\n        }),\n        title: { ...state.title, track: action.payload.title },\n        loading: { ...state.loading, TracksPage: false },\n      };\n    case Actions.GET_ARTISTS:\n      return {\n        ...state,\n        artists: action.payload.data.map((artist) => {\n          return {\n            name: artist.name,\n            y: Number(artist.listeners),\n          };\n        }),\n        title: { ...state.title, artist: action.payload.title },\n        loading: { ...state.loading, ArtistsPage: false },\n      };\n    case Actions.SET_ART_TRA_FORM:\n      return {\n        ...state,\n        highchartform: {\n          ...state.highchartform,\n          country: action.payload.country,\n          topnumber: Number(action.payload.topnumber),\n        },\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers, createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { chartsReducer } from \"./reducers\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nconst reducers = combineReducers({\n  chartsReducer,\n});\n\nconst store = createStore(\n  reducers,\n  composeWithDevTools(applyMiddleware(thunk))\n);\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport store from \"./redux/store\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}