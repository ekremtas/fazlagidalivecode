{"version":3,"sources":["components/BaseHighcharts/BaseHighcharts.js","components/BaseHighcharts/index.js","components/TopTracks/TopTracks.js","components/useInput/index.js","components/useInput/useInput.js","components/LastfmForm/index.js","components/LastfmForm/LastfmForm.js","container/LastfmPage/LastfmPage.js","container/LastfmPage/index.js","App.js","serviceWorker.js","index.js"],"names":["BaseHighcharts","props","data","options","chart","type","title","text","xAxis","xAxisType","yAxis","yAxisTitle","legend","enabled","plotOptions","series","borderWidth","dataLabels","format","tooltip","headerFormat","pointFormat","name","colorByPoint","highcharts","Highcharts","BaseHighchart","require","useInput","firstvalue","useState","value","setValue","Input","onChange","e","target","LastfmForm","inputs","countryInput","topnumberInput","setSubmitform","submitform","Form","onSubmit","console","log","preventDefault","className","Row","Col","md","FormGroup","Label","Button","axios","API","API_KEY","LastfmPage","tracks","setTracks","artists","setArtist","country","setCountry","topnumber","setTopnumber","useEffect","get","then","response","undefined","track_res","track","map","y","Number","listeners","toUpperCase","catch","error","topartists","artist_res","artist","Container","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8867dfc3.chunk.js","sourcesContent":["import React from \"react\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\n\nconst BaseHighcharts = (props) => {\n\n  const {data} = props; \n\n  const options = {\n    chart: {\n      type: data.chart,\n    },\n    title: {\n      text: data.title,\n    },\n    xAxis: {\n      type: data.xAxisType,\n    },\n    yAxis: {\n      title: {\n        text: data.yAxisTitle,\n      },\n    },\n    legend: {\n      enabled: false,\n    },\n    plotOptions: {\n      series: {\n        borderWidth: 0,\n        dataLabels: {\n          enabled: true,\n          format: \"{point.y:.1f}\",\n        },\n      },\n    },\n\n    tooltip: {\n      headerFormat: '<span style=\"font-size:11px\">{series.name}</span><br>',\n      pointFormat:\n        '<span style=\"color:{point.color}\">{point.name}</span>: <b>{point.y:.2f}</b> of total<br/>',\n    },\n\n    series: [\n      {\n        name: data.name,\n        colorByPoint: true,\n        data: data.data,\n      },\n    ],\n  };\n  return (\n    <div>\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </div>\n  );\n};\n\nexport default BaseHighcharts;\n","import BaseHighchart from \"./BaseHighcharts\";\n\nexport default BaseHighchart;","import React, { useState, useEffect } from \"react\";\nimport BaseHighcharts from \"../BaseHighcharts/BaseHighcharts\";\n\nconst axios = require(\"axios\");\n\nconst TopTracks = () => {\n  const [tracks, setTracks] = useState([]);\n  const [country, setCountry] = useState([]);\n\n  useEffect(() => {\n    // Make a request for a user with a given ID\n    axios\n      .get(\n        `http://ws.audioscrobbler.com/2.0/?method=geo.gettoptracks&country=${country}&api_key=97cee60fe2193b383cd8377301901a80&format=json&limit=10`\n      )\n      .then(function (response) {\n        // handle success\n\n        if (response.data.tracks !== undefined) {\n          const exam = response.data.tracks.track.map((track) => {\n            return {\n              name: track.name,\n              y: Number(track.listeners),\n            };\n          });\n\n          setTracks(exam);\n        } else {\n          setTracks([]);\n        }\n      })\n      .catch(function (error) {\n        // handle error\n        console.log(error);\n      });\n  }, [country]);\n\n  const handleChange = (event) => {\n    setCountry(event.target.value);\n  };\n\n  return (\n    <div>\n      <form>\n        <label>\n          Name:\n          <input type=\"text\" value={country} onChange={handleChange} />\n        </label>\n      </form>\n      {tracks.length !== 0 ? (\n        <BaseHighcharts tracks={tracks} text={\"Top 20\"} />\n      ) : (\n        <h1>Bilgi Bulunamadı</h1>\n      )}\n    </div>\n  );\n};\n\nexport default TopTracks;\n","import useInput from \"./useInput\";\n\nexport default useInput;","import React, { useState } from \"react\";\nimport {\n  Input,\n} from \"reactstrap\";\n\nconst useInput = ({ type, firstvalue /*...*/ }) => {\n  const [value, setValue] = useState(firstvalue ? firstvalue : null);\n  const input = (\n    <Input\n      value={value}\n      onChange={(e) => setValue(e.target.value)}\n      type={type}\n    />\n  );\n  return [value, input];\n};\n\nexport default useInput;\n","import LastfmForm from \"./LastfmForm\";\n\n\nexport default LastfmForm;","import React from \"react\";\nimport { Form, FormGroup, Label, Row, Col, Button } from \"reactstrap\";\n\nconst LastfmForm = (props) => {\n  const {\n    countryInput,\n    topnumberInput,\n    setSubmitform,\n    submitform\n  } = props.inputs;\n\n  const onSubmit = function (e) {\n    submitform === 0 ? setSubmitform(1): console.log(\"boş\") ;\n    e.preventDefault();\n  };\n  return (\n    <Form onSubmit={onSubmit} className=\"m-5\">\n      <Row>\n        <Col md=\"6\">\n          <FormGroup>\n            <Label>Country Name</Label>\n            {countryInput}\n          </FormGroup>\n        </Col>\n        <Col md=\"6\">\n          <FormGroup>\n            <Label>Top Number</Label>\n            {topnumberInput}\n          </FormGroup>\n        </Col>\n      </Row>\n      <Button>Submit</Button>\n    </Form>\n  );\n};\n\nexport default LastfmForm;\n","import React, { useEffect, useState } from \"react\";\nimport { BaseHighcharts, useInput, LastfmForm } from \"../../components\";\nimport { Container } from \"reactstrap\";\n\nconst axios = require(\"axios\");\n\nconst API = \"https://ws.audioscrobbler.com/2.0/\";\nconst API_KEY = \"97cee60fe2193b383cd8377301901a80\";\n\nconst LastfmPage = () => {\n  const [tracks, setTracks] = useState({});\n  const [artists, setArtist] = useState({});\n\n  const [submitform, setSubmitform] = useState(1);\n\n  const [country, setCountry] = useInput({\n    type: \"text\",\n    firstvalue: \"TURKEY\",\n  });\n  const [topnumber, setTopnumber] = useInput({\n    type: \"number\",\n    firstvalue: 10,\n  });\n\n  useEffect(() => {\n    // Make a request for a user with a given ID\n    if (submitform === 1) {\n      setSubmitform(0);\n      axios\n        .get(\n          `${API}?method=geo.gettoptracks&country=${country}&api_key=${API_KEY}&format=json&limit=${topnumber}`\n        )\n        .then((response) => {\n          // handle success\n          if (response.data.tracks !== undefined) {\n            const track_res = response.data.tracks.track.map((track) => {\n              return {\n                name: track.name,\n                y: Number(track.listeners),\n              };\n            });\n            setTracks({\n              data: track_res,\n              title: `Top ${topnumber} Tracks in ${country.toUpperCase()}`,\n            });\n          } else {\n            setTracks({});\n          }\n        })\n        .catch((error) => {\n          // handle error\n          console.log(error);\n        });\n\n      axios\n        .get(\n          `${API}?method=geo.gettopartists&country=${country}&api_key=${API_KEY}&format=json&limit=${topnumber}`\n        )\n        .then((response) => {\n          // handle success\n          if (response.data.topartists !== undefined) {\n            const artist_res = response.data.topartists.artist.map((artist) => {\n              return {\n                name: artist.name,\n                y: Number(artist.listeners),\n              };\n            });\n\n            setArtist({\n              data: artist_res,\n              title: `Top ${topnumber} Artist in ${country.toUpperCase()}`,\n            });\n          } else {\n            setArtist({});\n          }\n        })\n        .catch((error) => {\n          // handle error\n          console.log(error);\n        });\n    }\n  }, [country, submitform, topnumber]);\n\n  return (\n    <Container>\n      <LastfmForm\n        inputs={{\n          countryInput: setCountry,\n          topnumberInput: setTopnumber,\n          setSubmitform: setSubmitform,\n          submitform: submitform,\n        }}\n      />\n      {tracks.data !== undefined ? (\n        <BaseHighcharts\n          data={{\n            data: tracks.data,\n            chart: \"column\",\n            title: tracks.title,\n            name: \"Tracks\",\n            xAxisType: \"category\",\n            yAxisTitle: \"Total percent market share\",\n          }}\n        />\n      ) : (\n        <h1>Bilgi Bulunamadı</h1>\n      )}\n\n      {artists.data !== undefined ? (\n        <BaseHighcharts\n          data={{\n            data: artists.data,\n            chart: \"column\",\n            title: artists.title,\n            name: \"Artist\",\n            xAxisType: \"category\",\n            yAxisTitle: \"Total percent market share\",\n          }}\n        />\n      ) : (\n        <h1>Bilgi Bulunamadı</h1>\n      )}\n    </Container>\n  );\n};\n\nexport default LastfmPage;\n","import LastfmPage from \"./LastfmPage\";\n\nexport default LastfmPage;","import React from 'react';\nimport './App.css';\nimport { LastfmPage } from './container';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       <LastfmPage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}